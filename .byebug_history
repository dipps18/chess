exit
cont
color
next
exit
@pieces.select{|piece| piece.pos == position}
@pieces
position
color
next
cont
next
piece.kind_of?(Queen)
piece.kind_of(Queen)
piece
step
piece_type(piece_
step
piece
color
step
next
exit
color_pieces
position
positon
@white[:pawns]
next
position
step
next
step
next
cont
next
pawn_pos
next
exit
color_pieces
color_pieces'
new_piece_pos
input[0...-2]
next
exit
pawn_pos
next
new_piece
next
new_piece_pos
next
input
exit
cont
exit
exi
cont
 next
exit
cont
next
color
position
next
step
exit
color
position
next
step
cont
next
result
next
@board.white[:bishops]
@white[:bishops]
next
cont
next
@actual_after
next
@board.white[:bishops]
next
@white[:bishops]
next
@white[:bishops]
color
step
pos
next
step
input
next
step
next
step
next
exit
cont
position
cont
color
position
exit
next
step
next
step
exit
next
step
next
exit
next
step
cont
exit
next
step
piece.color
piece
step
piece
exit
next
piece
next
exit
!piece.kind_of?(Pawn) && !piece.kind_of?(King)
piece
PIECE
cont
exit
new_piece_pos
next
exit
@cells[destination[0]][destination[1
squares_empty?(destination)
next
destination
next
step
exit
new_piece_pos
next
exit
@cells[positions[0]][positions[1]]
@cells[positions[0][positions[1]]
step
next
positions
next
step
Game.capture?(input)
Game.capture?
next
step
Board.coordinates(destination)
destination
next
@white[:pawns]
input
step
exit
destination
input
step
cont
exit
input
new_piece
cont
next
cont
exit
step
board.enpassant?(new_pos, input, opp_color)
board.enpassant?(old_pos, input, opp_color)
new_pos
old_pos
next
step
next
step
next
step
next
step
next
nex
step
next
step
cont
exit
cont
exit
@white
color
piece
step
next
nexnext
captured_piece
next
exit
@black
@black[:king]
step
color
next
step
valid_notation?(input, opp_color)
next
step
piece
destination
step
capture
step
next
step
piece
next
piece
next
piece
next
piece
next
step
next
step
exit
next
step
piece
next
piece
next
piece
next
piece
next
piece
next
piece
next
piece
step
next
nex
step
cont
next
self
board
